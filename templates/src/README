TODO: write your compiler in this directory.

------------------------------------
Provided files - additional details
------------------------------------
The files in this directory provide a simple example for lexing and parsing a
small calculator grammar with the lex and yacc tools (also known as Flex and 
Bison). You are free to modify any or all parts of these files, but must use 
the lex and yacc tools in your project.

> ast.h <

This header file gives the C struct definition of a basic abstract syntax tree 
(AST) consisting of a general treeNode type that is then specialised to 
different concrete node types. A tree of this type is generated by the example 
calculator parser.

> BasicLexer.lex <

This is the lex configuration file for the example calculator lexer. The lexer
defines a small token set for the calculator's syntax which are passed onto the
calculator parser also found in this directory. You will probably want to extend 
this lexer to the full WACC language.

> BasicParser.yacc <

This is the yacc configuration file for the example calculator parser. The 
parser defines a small grammar for the calculator's syntact which is used to
construct an AST representing the input program and run a traversal over the 
tree which visits every one. You will probably want to extend this parser to the 
full WACC language.

> BasicVisitor.c <

This is an example tree traversal program which is called by the calculator 
parser to visit every node of the generated AST and print a view of its 
structure. You will probably want to extend this visitor to carry out semantic 
checking for the full WACC language.

> Makefile <

This build scipt takes the provided lex and yacc configuration files and 
generates C that implements a lexer and parser for the calculator example. This 
code is then compiled and link with the provided example AST and tree visitor
to produce a simple example executable called 'basic'.

> basic <

once you have run 'make' in this directory, you will have a simple executable 
which implements the lexer, parser and tree printer described above. This can be 
run over an input program to print a representation of the produced AST to the 
console. 

It is run by calling ./basic on the command line. You will need to type in your 
input program and then close the input stream with ctrl-D.

Rather than typing your input programs in by hand, you can pass the executable a 
file to read by piping it in through stdin with
  ./basic < testfile
When using the executable in this way you won't need to hit ctrl-D to close the 
input stream as the EOF character in the file does this for you.


--------------------------
Useful Lex/Yacc resources
--------------------------
The provided calculator example was created with the help of the following 
resources which you may find useful to your further development:

  http://dinosaur.compilertools.net
  http://dinosaur.compilertools.net/lex/index.html
  http://dinosaur.compilertools.net/yacc/index.html
  http://www.cs.man.ac.uk/~pjj/cs211/ho/node8.html
  ../LexAndYaccTutorial.pdf


